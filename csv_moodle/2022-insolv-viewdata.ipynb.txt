{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as st\n\n# Configuring matplotlib to display and save images with a white background\nplt.rcParams['figure.facecolor'] = 'white'\n\n# Reading the data from the csv file\nraw_data = pd.read_csv('../input/insolv1/Insol.csv', decimal=\",\", sep=\";\")\nnp.set_printoptions(suppress=True)\n\n# Defining some regular bins\n# Bin for variation coefiecient\nbins_var = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]\n\n# Bin for values between 0 and 1\nbins_from_zero = [0, 0.2, 0.4, 0.6, 0.8, 1]","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:49:42.693819Z","iopub.execute_input":"2022-05-30T14:49:42.694223Z","iopub.status.idle":"2022-05-30T14:49:42.729722Z","shell.execute_reply.started":"2022-05-30T14:49:42.694191Z","shell.execute_reply":"2022-05-30T14:49:42.728929Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Distrito']\n\nfPorDistrito = curColumn[raw_data['Insolvencia'] == 1]\nempresasFalidasPorDistrito = pd.DataFrame(fPorDistrito.value_counts().sort_index())\nempresasFalidasPorDistrito.columns = ['Nº de empresas falidas']\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\ndisplay(dfSummary)\n\ntotalPerAtrr = pd.DataFrame(curColumn.value_counts().sort_index())\ntotalPerAtrr.columns = ['Nº de empresas']\ndisplay(totalPerAtrr)\ndisplay(empresasFalidasPorDistrito)\n\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)\n\n","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:49:45.260815Z","iopub.execute_input":"2022-05-30T14:49:45.262125Z","iopub.status.idle":"2022-05-30T14:49:45.418557Z","shell.execute_reply.started":"2022-05-30T14:49:45.262055Z","shell.execute_reply":"2022-05-30T14:49:45.417299Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['NACE1']\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\ndisplay(dfSummary)\n\nfPorNace = curColumn[raw_data['Insolvencia'] == 1]\nnaceInsolvidos = pd.DataFrame(fPorNace.value_counts().sort_index())\nnaceInsolvidos.columns = ['Nº de Empresas']\ndisplay(naceInsolvidos)\n\n\ntotalPerAtrr = pd.DataFrame(curColumn.value_counts().sort_index())\ntotalPerAtrr.columns = ['Nº de Empresas']\ndisplay(totalPerAtrr)\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)\n\n","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:50:31.327616Z","iopub.execute_input":"2022-05-30T14:50:31.328303Z","iopub.status.idle":"2022-05-30T14:50:31.469057Z","shell.execute_reply.started":"2022-05-30T14:50:31.328268Z","shell.execute_reply":"2022-05-30T14:50:31.467736Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['NACE2']\nvar_nace2 = curColumn.unique()\nvar_nace2.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\ndisplay(dfSummary)\n\ntotalPerAtrr = pd.DataFrame(curColumn.value_counts().sort_index())\ntotalPerAtrr.columns = ['Nº de empresas']\ndisplay(totalPerAtrr)\n\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:51:10.080855Z","iopub.execute_input":"2022-05-30T14:51:10.081309Z","iopub.status.idle":"2022-05-30T14:51:10.262569Z","shell.execute_reply.started":"2022-05-30T14:51:10.081277Z","shell.execute_reply":"2022-05-30T14:51:10.261547Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Numero_Empregados']\nvar_empregados = curColumn.unique()\nvar_empregados.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\nbins = [1, 100, 200, 300, 400, 500, 600, 1200, 1400]\ncurColumn = pd.cut(curColumn, bins)\n\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Número de Empresas dentro do intervalo']\n\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()\n","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:51:42.361040Z","iopub.execute_input":"2022-05-30T14:51:42.361500Z","iopub.status.idle":"2022-05-30T14:51:42.594770Z","shell.execute_reply.started":"2022-05-30T14:51:42.361467Z","shell.execute_reply":"2022-05-30T14:51:42.593519Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Num_anos_disponiveis_base']\nvar_num_anos_disponiveis_base = curColumn.unique()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Número de registos (anos disponíveis base)']\n\ndisplay(dfSummary)\ndisplay(dfIntervals)\n\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:53:00.767555Z","iopub.execute_input":"2022-05-30T14:53:00.768622Z","iopub.status.idle":"2022-05-30T14:53:00.961680Z","shell.execute_reply.started":"2022-05-30T14:53:00.768576Z","shell.execute_reply":"2022-05-30T14:53:00.960412Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_das_vendas']\nvar_variacao_vendas = curColumn.unique()\nvar_variacao_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação de vendas dentro do intervalo']\n\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()\n","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:53:42.812045Z","iopub.execute_input":"2022-05-30T14:53:42.812487Z","iopub.status.idle":"2022-05-30T14:53:43.065354Z","shell.execute_reply.started":"2022-05-30T14:53:42.812455Z","shell.execute_reply":"2022-05-30T14:53:43.064372Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_resultado_operacional']\nvar_variacao_resultado_op = curColumn.unique()\nvar_variacao_resultado_op.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação de resultado operacional dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:54:41.481083Z","iopub.execute_input":"2022-05-30T14:54:41.481550Z","iopub.status.idle":"2022-05-30T14:54:41.685572Z","shell.execute_reply.started":"2022-05-30T14:54:41.481514Z","shell.execute_reply":"2022-05-30T14:54:41.684092Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_do_activo']\nvar_variacao_ativo = curColumn.unique()\nvar_variacao_ativo.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação de ativo dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:55:27.885704Z","iopub.execute_input":"2022-05-30T14:55:27.886350Z","iopub.status.idle":"2022-05-30T14:55:28.120413Z","shell.execute_reply.started":"2022-05-30T14:55:27.886314Z","shell.execute_reply":"2022-05-30T14:55:28.119304Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_dos_capitais_proprios']\nvar_variacao_dos_capitais_proprios = curColumn.unique()\nvar_variacao_dos_capitais_proprios.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação dos capitais proprios dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\n\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:56:27.356632Z","iopub.execute_input":"2022-05-30T14:56:27.357610Z","iopub.status.idle":"2022-05-30T14:56:27.605964Z","shell.execute_reply.started":"2022-05-30T14:56:27.357553Z","shell.execute_reply":"2022-05-30T14:56:27.604765Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_do_ativo_circulante']\nvar_variacao_do_ativo_circulante = curColumn.unique()\nvar_variacao_do_ativo_circulante.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação de ativo circulante dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:56:31.076299Z","iopub.execute_input":"2022-05-30T14:56:31.076764Z","iopub.status.idle":"2022-05-30T14:56:31.318994Z","shell.execute_reply.started":"2022-05-30T14:56:31.076728Z","shell.execute_reply":"2022-05-30T14:56:31.317964Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_das_existencias']\nvar_variacao_das_existencias = curColumn.unique()\nvar_variacao_das_existencias.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação das existencias dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Variacao_do_imobilizado']\nvar_variacao_do_imobilizado = curColumn.unique()\nvar_variacao_do_imobilizado.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com variação do imobilizado dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Fundo_de_maneio']\nvar_fundo_de_maneio = curColumn.unique()\nvar_fundo_de_maneio.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com fundo de maneio dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:56:34.463513Z","iopub.execute_input":"2022-05-30T14:56:34.464049Z","iopub.status.idle":"2022-05-30T14:56:34.736280Z","shell.execute_reply.started":"2022-05-30T14:56:34.464010Z","shell.execute_reply":"2022-05-30T14:56:34.735093Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['REPV']\nvar_repv = curColumn.unique()\nvar_repv.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 5)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com REPV dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Prazo_medio_de_recebimento']\nvar_prazo_medio_de_recebimento = curColumn.unique()\nvar_prazo_medio_de_recebimento.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 5)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com prazo medio de recebimento dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Liquidez_geral']\nvar_liquidez_geral = curColumn.unique()\nvar_liquidez_geral.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com liquidez geral dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Liquidez_reduzida']\nvar_liquidez_reduzida = curColumn.unique()\nvar_liquidez_reduzida.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com liquidez reduzida dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Solvabilidade']\nvar_solvabilidade = curColumn.unique()\nvar_solvabilidade.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com solvabilidade dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Autonomia_financeira']\nvar_autonomia_financeira = curColumn.unique()\nvar_autonomia_financeira.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com autonomia financeira dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Endividamento']\nvar_endividamento = curColumn.unique()\nvar_endividamento.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com endividamento dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Estrutura_financeira']\nvar_estrutura_financeira = curColumn.unique()\nvar_estrutura_financeira.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 20)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com estrutura financeira dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Passivo_de_curto_prazo_a_dividir_passivo_total']\nvar_passivo_de_curto_prazo_a_dividir_passivo_total = curColumn.unique()\nvar_passivo_de_curto_prazo_a_dividir_passivo_total.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_from_zero)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com passivo de curto prazo (div passivo total) dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Custos_dos_encargos_financeiros_dividir_resultado_operacional']\nvar_custos_dos_encargos_financeiros_dividir_resultado_operacional = curColumn.unique()\nvar_custos_dos_encargos_financeiros_dividir_resultado_operacional.sort()\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com custos dos encargos (div res op) dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Rendibilidade_operacional_vendas']\nvar_rendibilidade_operacional_vendas = curColumn.unique()\nvar_rendibilidade_operacional_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com rendibilidade operacional de vendas dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Rendibilidade_liquida_das_vendas']\nvar_rendibilidade_liquida_das_vendas = curColumn.unique()\nvar_rendibilidade_liquida_das_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com rendibilidade liquida das vendas dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Rendibilidade_do_ativo']\nvar_rendibilidade_do_ativo = curColumn.unique()\nvar_rendibilidade_do_ativo.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\ncurColumn = pd.cut(curColumn, bins_var)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com rendibilidade do ativo dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Rendibilidade_capitais_proprios']\nvar_rendibilidade_capitais_proprios = curColumn.unique()\nvar_rendibilidade_capitais_proprios.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com rendibilidade de capitais proprios dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:56:42.338743Z","iopub.execute_input":"2022-05-30T14:56:42.339231Z","iopub.status.idle":"2022-05-30T14:56:42.586194Z","shell.execute_reply.started":"2022-05-30T14:56:42.339196Z","shell.execute_reply":"2022-05-30T14:56:42.584831Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Passivo_curto_prazo_dividir_vendas']\nvar_passivo_curto_prazo_dividir_vendas = curColumn.unique()\nvar_passivo_curto_prazo_dividir_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncurColumn = pd.cut(curColumn, bins_from_zero)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com passivo curto prazo dividir vendas dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Peso_das_amortizacoes_dividir_vendas']\nvar_peso_das_amortizacoes_dividir_vendas = curColumn.unique()\nvar_peso_das_amortizacoes_dividir_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncurColumn = pd.cut(curColumn, bins_from_zero)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com peso das amortizações dividir vendas dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Peso_encargos_financeiros_dividir_vendas']\nvar_peso_encargos_financeiros_dividir_vendas = curColumn.unique()\nvar_peso_encargos_financeiros_dividir_vendas.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ndfSummary = pd.DataFrame(colSummary).apply(lambda s: s.apply('{0:.5f}'.format))\ndfSummary.columns = ['Valor']\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncurColumn = pd.cut(curColumn, bins_from_zero)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com peso encargos financeiros dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Produtividade_por_trabalhador']\nvar_produtividade_por_trabalhador = curColumn.unique()\nvar_produtividade_por_trabalhador.sort()\n\ncolSummary = curColumn.describe()\ncolSummary.loc['mode'] = curColumn.mode().tolist()[0]\ncolSummary.loc['confidence-interval'] = st.norm.interval(alpha=0.95, loc=np.mean(curColumn), scale=st.sem(curColumn))\ndfSummary = pd.DataFrame(colSummary)\ndfSummary.columns = ['Valor']\n\nbins = np.linspace(curColumn.min()-1, curColumn.max()+1, 10)\ncurColumn = pd.cut(curColumn, bins)\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com produtividade por trabalhador dentro do intervalo']\ndisplay(dfSummary)\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.bar()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Certificacao_legal_contas']\nvar_certificacao_legal_contas = curColumn.unique()\nvar_certificacao_legal_contas.sort()\n\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas com/sem certificação legal de contas']\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"curColumn = raw_data['Insolvencia']\nvar_insolvencia = curColumn.unique()\nvar_insolvencia.sort()\n\ndfIntervals = pd.DataFrame(curColumn.value_counts().sort_index())\ndfIntervals.columns = ['Nº empresas em insolvencia (sim/nao)']\ndisplay(dfIntervals)\ncurColumn.value_counts().sort_index().plot.pie(\n    autopct='%1.1f%%',\n    startangle=90,\n    radius=2,\n    pctdistance=1.1,\n    labeldistance=0.5\n)","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:57:25.643024Z","iopub.execute_input":"2022-05-30T14:57:25.643434Z","iopub.status.idle":"2022-05-30T14:57:25.767572Z","shell.execute_reply.started":"2022-05-30T14:57:25.643400Z","shell.execute_reply":"2022-05-30T14:57:25.766171Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# Configuring the matplotlib figure size and title\nfig, ax = plt.subplots(figsize=(30,30))\nax.set_title('Correlation between variables in dataset')\n\n# Excluding the categorical columns from dataframe\nfiltered_data = raw_data.drop([\"Distrito\", \"NACE1\", \"NACE2\", \"Certificacao_legal_contas\", \"Insolvencia\"], axis=1)\nheatmap = sns.heatmap(filtered_data.corr(), vmin=-1, vmax=1, annot=True, ax=ax, cmap=\"icefire\")\n\n# Saving the image to a file\nplt.savefig('correlation_matrix.png', bbox_inches=\"tight\")","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:56:46.879595Z","iopub.execute_input":"2022-05-30T14:56:46.880049Z","iopub.status.idle":"2022-05-30T14:56:54.832856Z","shell.execute_reply.started":"2022-05-30T14:56:46.880014Z","shell.execute_reply":"2022-05-30T14:56:54.831672Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"raw_data.head()","metadata":{"execution":{"iopub.status.busy":"2022-05-30T14:59:43.822934Z","iopub.execute_input":"2022-05-30T14:59:43.823335Z","iopub.status.idle":"2022-05-30T14:59:43.850843Z","shell.execute_reply.started":"2022-05-30T14:59:43.823305Z","shell.execute_reply":"2022-05-30T14:59:43.849983Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"import seaborn as sn\nm=raw_data.corr()\nsn.heatmap(m, annot=True)","metadata":{"execution":{"iopub.status.busy":"2022-05-30T15:00:23.043419Z","iopub.execute_input":"2022-05-30T15:00:23.043915Z","iopub.status.idle":"2022-05-30T15:00:27.411060Z","shell.execute_reply.started":"2022-05-30T15:00:23.043854Z","shell.execute_reply":"2022-05-30T15:00:27.409863Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"sn.set_theme(style=\"dark\")\ng=sn.pairplot(raw_data, hue=\"Insolvencia\")\ng.savefig(\"scatterplot_matrix.png\")","metadata":{"execution":{"iopub.status.busy":"2022-05-30T15:01:31.835559Z","iopub.execute_input":"2022-05-30T15:01:31.836961Z","iopub.status.idle":"2022-05-30T15:15:14.503623Z","shell.execute_reply.started":"2022-05-30T15:01:31.836895Z","shell.execute_reply":"2022-05-30T15:15:14.502452Z"},"trusted":true},"execution_count":29,"outputs":[]}]}